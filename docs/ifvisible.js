(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ifvisible_1 = __webpack_require__(2);
	var root = typeof self === "object" && self.self === self && self ||
	    typeof global === "object" && global.global === global && global ||
	    this;
	exports.ifvisible = new ifvisible_1.IfVisible(root, document);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var STATUS_ACTIVE = "active";
	var STATUS_IDLE = "idle";
	var STATUS_HIDDEN = "hidden";
	var DOC_HIDDEN;
	var VISIBILITY_CHANGE_EVENT = void 0;
	var Events;
	(function (Events) {
	    var store = {};
	    var setListener;
	    function attach(event, callback) {
	        if (!store[event]) {
	            store[event] = [];
	        }
	        store[event].push(callback);
	    }
	    Events.attach = attach;
	    function fire(event, args) {
	        if (store[event]) {
	            store[event].forEach(function (callback) {
	                callback.apply(void 0, args);
	            });
	        }
	    }
	    Events.fire = fire;
	    function remove(event, callback) {
	        if (store[event]) {
	            store[event] = store[event].filter(function (savedCallback) {
	                return callback !== savedCallback;
	            });
	        }
	    }
	    Events.remove = remove;
	    function dom(element, event, callback) {
	        if (!setListener) {
	            if (element.addEventListener) {
	                setListener = function (el, ev, fn) {
	                    return el.addEventListener(ev, fn, false);
	                };
	            }
	            else if (typeof element["attachEvent"] === "function") {
	                setListener = function (el, ev, fn) {
	                    return el.attachEvent("on" + ev, fn, false);
	                };
	            }
	            else {
	                setListener = function (el, ev, fn) {
	                    return el["on" + ev] = fn;
	                };
	            }
	        }
	        return setListener(element, event, callback);
	    }
	    Events.dom = dom;
	})(Events = exports.Events || (exports.Events = {}));
	var Timer = (function () {
	    function Timer(ifvisible, seconds, callback) {
	        var _this = this;
	        this.ifvisible = ifvisible;
	        this.seconds = seconds;
	        this.callback = callback;
	        this.stopped = false;
	        this.start();
	        this.ifvisible.on("statusChanged", function (data) {
	            if (_this.stopped === false) {
	                if (data.status === STATUS_ACTIVE) {
	                    _this.start();
	                }
	                else {
	                    _this.pause();
	                }
	            }
	        });
	    }
	    Timer.prototype.start = function () {
	        this.stopped = false;
	        clearInterval(this.token);
	        this.token = setInterval(this.callback, this.seconds * 1000);
	    };
	    Timer.prototype.stop = function () {
	        this.stopped = true;
	        clearInterval(this.token);
	    };
	    Timer.prototype.resume = function () {
	        this.start();
	    };
	    Timer.prototype.pause = function () {
	        this.stop();
	    };
	    return Timer;
	}());
	exports.Timer = Timer;
	exports.IE = (function () {
	    var undef, v = 3, div = document.createElement("div"), all = div.getElementsByTagName("i");
	    while (div.innerHTML = "<!--[if gt IE " + (++v) + "]><i></i><![endif]-->",
	        all[0])
	        ;
	    return v > 4 ? v : undef;
	}());
	var IfVisible = (function () {
	    function IfVisible(root, doc) {
	        var _this = this;
	        this.root = root;
	        this.doc = doc;
	        this.status = STATUS_ACTIVE;
	        this.VERSION = ("2.0.7");
	        this.timers = [];
	        this.idleTime = 30000;
	        var BLUR_EVENT = "blur";
	        var FOCUS_EVENT = "focus";
	        // Find correct browser events
	        if (this.doc.hidden !== void 0) {
	            DOC_HIDDEN = "hidden";
	            VISIBILITY_CHANGE_EVENT = "visibilitychange";
	        }
	        else if (this.doc["mozHidden"] !== void 0) {
	            DOC_HIDDEN = "mozHidden";
	            VISIBILITY_CHANGE_EVENT = "mozvisibilitychange";
	        }
	        else if (this.doc["msHidden"] !== void 0) {
	            DOC_HIDDEN = "msHidden";
	            VISIBILITY_CHANGE_EVENT = "msvisibilitychange";
	        }
	        else if (this.doc["webkitHidden"] !== void 0) {
	            DOC_HIDDEN = "webkitHidden";
	            VISIBILITY_CHANGE_EVENT = "webkitvisibilitychange";
	        }
	        if (DOC_HIDDEN === void 0) {
	            if (exports.IE < 9) {
	                BLUR_EVENT = "focusout";
	            }
	            Events.dom(this.root, BLUR_EVENT, function () {
	                return _this.blur();
	            });
	            Events.dom(this.root, FOCUS_EVENT, function () {
	                return _this.focus();
	            });
	        }
	        else {
	            var trackChange = function () {
	                if (_this.doc[DOC_HIDDEN]) {
	                    _this.blur();
	                }
	                else {
	                    _this.focus();
	                }
	            };
	            trackChange(); // get initial status
	            Events.dom(this.doc, VISIBILITY_CHANGE_EVENT, trackChange);
	        }
	        this.startIdleTimer();
	        this.trackIdleStatus();
	    }
	    IfVisible.prototype.startIdleTimer = function (event) {
	        var _this = this;
	        // Prevents Phantom events.
	        // @see https://github.com/serkanyersen/ifvisible.js/pull/37
	        if (event instanceof MouseEvent && event.movementX === 0 && event.movementY === 0) {
	            return;
	        }
	        this.timers.map(clearTimeout);
	        this.timers.length = 0; // clear the array
	        if (this.status === STATUS_IDLE) {
	            this.wakeup();
	        }
	        this.idleStartedTime = +(new Date());
	        this.timers.push(setTimeout(function () {
	            if (_this.status === STATUS_ACTIVE || _this.status === STATUS_HIDDEN) {
	                return _this.idle();
	            }
	        }, this.idleTime));
	    };
	    IfVisible.prototype.trackIdleStatus = function () {
	        Events.dom(this.doc, "mousemove", this.startIdleTimer.bind(this));
	        Events.dom(this.doc, "mousedown", this.startIdleTimer.bind(this));
	        Events.dom(this.doc, "keyup", this.startIdleTimer.bind(this));
	        Events.dom(this.doc, "touchstart", this.startIdleTimer.bind(this));
	        Events.dom(this.root, "scroll", this.startIdleTimer.bind(this));
	        // When page is focues without any event, it should not be idle.
	        this.focus(this.startIdleTimer.bind(this));
	    };
	    IfVisible.prototype.on = function (event, callback) {
	        Events.attach(event, callback);
	        return this;
	    };
	    IfVisible.prototype.off = function (event, callback) {
	        Events.remove(event, callback);
	        return this;
	    };
	    IfVisible.prototype.setIdleDuration = function (seconds) {
	        this.idleTime = seconds * 1000;
	        this.startIdleTimer();
	        return this;
	    };
	    IfVisible.prototype.getIdleDuration = function () {
	        return this.idleTime;
	    };
	    IfVisible.prototype.getIdleInfo = function () {
	        var now = +(new Date());
	        var res;
	        if (this.status === STATUS_IDLE) {
	            res = {
	                isIdle: true,
	                idleFor: now - this.idleStartedTime,
	                timeLeft: 0,
	                timeLeftPer: 100
	            };
	        }
	        else {
	            var timeLeft = (this.idleStartedTime + this.idleTime) - now;
	            res = {
	                isIdle: false,
	                idleFor: now - this.idleStartedTime,
	                timeLeft: timeLeft,
	                timeLeftPer: parseFloat((100 - (timeLeft * 100 / this.idleTime)).toFixed(2))
	            };
	        }
	        return res;
	    };
	    IfVisible.prototype.idle = function (callback) {
	        if (callback) {
	            this.on("idle", callback);
	        }
	        else {
	            this.status = STATUS_IDLE;
	            Events.fire("idle");
	            Events.fire("statusChanged", [{ status: this.status }]);
	        }
	        return this;
	    };
	    IfVisible.prototype.blur = function (callback) {
	        if (callback) {
	            this.on("blur", callback);
	        }
	        else {
	            this.status = STATUS_HIDDEN;
	            Events.fire("blur");
	            Events.fire("statusChanged", [{ status: this.status }]);
	        }
	        return this;
	    };
	    IfVisible.prototype.focus = function (callback) {
	        if (callback) {
	            this.on("focus", callback);
	        }
	        else if (this.status !== STATUS_ACTIVE) {
	            this.status = STATUS_ACTIVE;
	            Events.fire("focus");
	            Events.fire("wakeup");
	            Events.fire("statusChanged", [{ status: this.status }]);
	        }
	        return this;
	    };
	    IfVisible.prototype.wakeup = function (callback) {
	        if (callback) {
	            this.on("wakeup", callback);
	        }
	        else if (this.status !== STATUS_ACTIVE) {
	            this.status = STATUS_ACTIVE;
	            Events.fire("wakeup");
	            Events.fire("statusChanged", [{ status: this.status }]);
	        }
	        return this;
	    };
	    IfVisible.prototype.onEvery = function (seconds, callback) {
	        return new Timer(this, seconds, callback);
	    };
	    IfVisible.prototype.now = function (check) {
	        if (check !== void 0) {
	            return this.status === check;
	        }
	        else {
	            return this.status === STATUS_ACTIVE;
	        }
	    };
	    return IfVisible;
	}());
	exports.IfVisible = IfVisible;


/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBmMTQ4ZTQzODJiZDA4YjJjZjgwZiIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaWZ2aXNpYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPO0FDVkE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ3RDQSwwQ0FBd0M7QUFHeEMsS0FBTSxJQUFJLEdBQUcsT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUk7S0FDdEQsT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLE1BQU07S0FDaEUsSUFBSSxDQUFDO0FBRUwsa0JBQVMsR0FBRyxJQUFJLHFCQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDOzs7Ozs7Ozs7O0FDUHZELEtBQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQztBQUMvQixLQUFNLFdBQVcsR0FBRyxNQUFNLENBQUM7QUFDM0IsS0FBTSxhQUFhLEdBQUcsUUFBUSxDQUFDO0FBRy9CLEtBQUksVUFBa0IsQ0FBQztBQUN2QixLQUFJLHVCQUF1QixHQUFXLEtBQUssQ0FBQyxDQUFDO0FBRTdDLEtBQWlCLE1BQU0sQ0E4Q3RCO0FBOUNELFlBQWlCLE1BQU07S0FDbkIsSUFBTSxLQUFLLEdBQUcsRUFB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cyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgZjE0OGU0MzgyYmQwOGIyY2Y4MGYiLCJpbXBvcnQgeyBJZlZpc2libGUgfSBmcm9tIFwiLi9pZnZpc2libGVcIjtcblxuZGVjbGFyZSB2YXIgZ2xvYmFsOiBhbnk7XG5jb25zdCByb290ID0gdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgJiYgc2VsZi5zZWxmID09PSBzZWxmICYmIHNlbGYgfHxcbiAgICAgICAgICAgICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiICYmIGdsb2JhbC5nbG9iYWwgPT09IGdsb2JhbCAmJiBnbG9iYWwgfHxcbiAgICAgICAgICAgICB0aGlzO1xuXG5leHBvcnQgY29uc3QgaWZ2aXNpYmxlID0gbmV3IElmVmlzaWJsZShyb290LCBkb2N1bWVudCk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21haW4udHMiLCJjb25zdCBTVEFUVVNfQUNUSVZFID0gXCJhY3RpdmVcIjtcbmNvbnN0IFNUQVRVU19JRExFID0gXCJpZGxlXCI7XG5jb25zdCBTVEFUVVNfSElEREVOID0gXCJoaWRkZW5cIjtcbmRlY2xhcmUgdmFyIF9fVkVSU0lPTl9fOiBzdHJpbmc7XG5cbmxldCBET0NfSElEREVOOiBzdHJpbmc7XG5sZXQgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQ6IHN0cmluZyA9IHZvaWQgMDtcblxuZXhwb3J0IG5hbWVzcGFjZSBFdmVudHMge1xuICAgIGNvbnN0IHN0b3JlID0ge307XG4gICAgbGV0IHNldExpc3RlbmVyOiBGdW5jdGlvbjtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiBhdHRhY2goZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGlmICghc3RvcmVbZXZlbnRdKSB7XG4gICAgICAgICAgICBzdG9yZVtldmVudF0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBzdG9yZVtldmVudF0ucHVzaChjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGZpcmUoZXZlbnQ6IHN0cmluZywgYXJncz86IGFueVtdKSB7XG4gICAgICAgIGlmIChzdG9yZVtldmVudF0pIHtcbiAgICAgICAgICAgIHN0b3JlW2V2ZW50XS5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVtb3ZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikge1xuICAgICAgICBpZiAoc3RvcmVbZXZlbnRdKSB7XG4gICAgICAgICAgICBzdG9yZVtldmVudF0gPSBzdG9yZVtldmVudF0uZmlsdGVyKChzYXZlZENhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrICE9PSBzYXZlZENhbGxiYWNrO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZG9tKGVsZW1lbnQ6IGFueSwgZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGlmICghc2V0TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBzZXRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbCwgZXYsIGZuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbC5hZGRFdmVudExpc3RlbmVyKGV2LCBmbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50W1wiYXR0YWNoRXZlbnRcIl0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHNldExpc3RlbmVyID0gZnVuY3Rpb24gKGVsLCBldiwgZm4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsLmF0dGFjaEV2ZW50KFwib25cIiArIGV2LCBmbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldExpc3RlbmVyID0gZnVuY3Rpb24gKGVsLCBldiwgZm4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsW1wib25cIiArIGV2XSA9IGZuO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldExpc3RlbmVyKGVsZW1lbnQsIGV2ZW50LCBjYWxsYmFjayk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWRsZUluZm8ge1xuICAgIGlzSWRsZTogYm9vbGVhbjtcbiAgICBpZGxlRm9yOiBudW1iZXI7XG4gICAgdGltZUxlZnQ6IG51bWJlcjtcbiAgICB0aW1lTGVmdFBlcjogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgVGltZXIge1xuICAgIHByaXZhdGUgdG9rZW46IG51bWJlcjtcbiAgICBzdG9wcGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGlmdmlzaWJsZTogSWZWaXNpYmxlLFxuICAgICAgICBwcml2YXRlIHNlY29uZHM6IG51bWJlcixcbiAgICAgICAgcHJpdmF0ZSBjYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuXG4gICAgICAgIHRoaXMuaWZ2aXNpYmxlLm9uKFwic3RhdHVzQ2hhbmdlZFwiLCAoZGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9wcGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gU1RBVFVTX0FDVElWRSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5zdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50b2tlbik7XG4gICAgICAgIHRoaXMudG9rZW4gPSBzZXRJbnRlcnZhbCh0aGlzLmNhbGxiYWNrLCB0aGlzLnNlY29uZHMgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRva2VuKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzdW1lKCkge1xuICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgcHVibGljIHBhdXNlKCkge1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBJRSA9IChmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHVuZGVmLFxuICAgICAgICB2ID0gMyxcbiAgICAgICAgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgICAgYWxsID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaVwiKTtcblxuICAgIHdoaWxlIChcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IFwiPCEtLVtpZiBndCBJRSBcIiArICgrK3YpICsgXCJdPjxpPjwvaT48IVtlbmRpZl0tLT5cIixcbiAgICAgICAgYWxsWzBdXG4gICAgKTtcblxuICAgIHJldHVybiB2ID4gNCA/IHYgOiB1bmRlZjtcbn0oKSk7XG5cbmV4cG9ydCBjbGFzcyBJZlZpc2libGUge1xuICAgIHB1YmxpYyBzdGF0dXM6IHN0cmluZyA9IFNUQVRVU19BQ1RJVkU7XG4gICAgcHVibGljIFZFUlNJT04gPSBfX1ZFUlNJT05fXztcbiAgICBwcml2YXRlIHRpbWVyczogbnVtYmVyW10gPSBbXTtcbiAgICBwcml2YXRlIGlkbGVUaW1lOiBudW1iZXIgPSAzMDAwMDtcbiAgICBwcml2YXRlIGlkbGVTdGFydGVkVGltZTogbnVtYmVyO1xuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvb3QsIHByaXZhdGUgZG9jKSB7XG4gICAgICAgIGxldCBCTFVSX0VWRU5UID0gXCJibHVyXCI7XG4gICAgICAgIGxldCBGT0NVU19FVkVOVCA9IFwiZm9jdXNcIjtcblxuICAgICAgICAvLyBGaW5kIGNvcnJlY3QgYnJvd3NlciBldmVudHNcbiAgICAgICAgaWYgKHRoaXMuZG9jLmhpZGRlbiAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBET0NfSElEREVOID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5UID0gXCJ2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kb2NbXCJtb3pIaWRkZW5cIl0gIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgRE9DX0hJRERFTiA9IFwibW96SGlkZGVuXCI7XG4gICAgICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCA9IFwibW96dmlzaWJpbGl0eWNoYW5nZVwiO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZG9jW1wibXNIaWRkZW5cIl0gIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgRE9DX0hJRERFTiA9IFwibXNIaWRkZW5cIjtcbiAgICAgICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5UID0gXCJtc3Zpc2liaWxpdHljaGFuZ2VcIjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRvY1tcIndlYmtpdEhpZGRlblwiXSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBET0NfSElEREVOID0gXCJ3ZWJraXRIaWRkZW5cIjtcbiAgICAgICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5UID0gXCJ3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoRE9DX0hJRERFTiA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBpZiAoSUUgPCA5KSB7XG4gICAgICAgICAgICAgICAgQkxVUl9FVkVOVCA9IFwiZm9jdXNvdXRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEV2ZW50cy5kb20odGhpcy5yb290LCBCTFVSX0VWRU5ULCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmx1cigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBFdmVudHMuZG9tKHRoaXMucm9vdCwgRk9DVVNfRVZFTlQsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0cmFja0NoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2NbRE9DX0hJRERFTl0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cmFja0NoYW5nZSgpOyAvLyBnZXQgaW5pdGlhbCBzdGF0dXNcbiAgICAgICAgICAgIEV2ZW50cy5kb20odGhpcy5kb2MsIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULCB0cmFja0NoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFydElkbGVUaW1lcigpO1xuICAgICAgICB0aGlzLnRyYWNrSWRsZVN0YXR1cygpO1xuICAgIH1cblxuICAgIHN0YXJ0SWRsZVRpbWVyKGV2ZW50PzogRXZlbnQpIHtcbiAgICAgICAgLy8gUHJldmVudHMgUGhhbnRvbSBldmVudHMuXG4gICAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3NlcmthbnllcnNlbi9pZnZpc2libGUuanMvcHVsbC8zN1xuICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50ICYmIGV2ZW50Lm1vdmVtZW50WCA9PT0gMCAmJiBldmVudC5tb3ZlbWVudFkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGltZXJzLm1hcChjbGVhclRpbWVvdXQpO1xuICAgICAgICB0aGlzLnRpbWVycy5sZW5ndGggPSAwOyAvLyBjbGVhciB0aGUgYXJyYXlcblxuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IFNUQVRVU19JRExFKSB7XG4gICAgICAgICAgICB0aGlzLndha2V1cCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pZGxlU3RhcnRlZFRpbWUgPSArKG5ldyBEYXRlKCkpO1xuXG4gICAgICAgIHRoaXMudGltZXJzLnB1c2goc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IFNUQVRVU19BQ1RJVkUgfHwgdGhpcy5zdGF0dXMgPT09IFNUQVRVU19ISURERU4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pZGxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMuaWRsZVRpbWUpKTtcbiAgICB9XG5cbiAgICB0cmFja0lkbGVTdGF0dXMoKSB7XG4gICAgICAgIEV2ZW50cy5kb20odGhpcy5kb2MsIFwibW91c2Vtb3ZlXCIsIHRoaXMuc3RhcnRJZGxlVGltZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIEV2ZW50cy5kb20odGhpcy5kb2MsIFwibW91c2Vkb3duXCIsIHRoaXMuc3RhcnRJZGxlVGltZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIEV2ZW50cy5kb20odGhpcy5kb2MsIFwia2V5dXBcIiwgdGhpcy5zdGFydElkbGVUaW1lci5iaW5kKHRoaXMpKTtcbiAgICAgICAgRXZlbnRzLmRvbSh0aGlzLmRvYywgXCJ0b3VjaHN0YXJ0XCIsIHRoaXMuc3RhcnRJZGxlVGltZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIEV2ZW50cy5kb20odGhpcy5yb290LCBcInNjcm9sbFwiLCB0aGlzLnN0YXJ0SWRsZVRpbWVyLmJpbmQodGhpcykpO1xuICAgICAgICAvLyBXaGVuIHBhZ2UgaXMgZm9jdWVzIHdpdGhvdXQgYW55IGV2ZW50LCBpdCBzaG91bGQgbm90IGJlIGlkbGUuXG4gICAgICAgIHRoaXMuZm9jdXModGhpcy5zdGFydElkbGVUaW1lci5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogKGRhdGE6IGFueSkgPT4gYW55KTogSWZWaXNpYmxlIHtcbiAgICAgICAgRXZlbnRzLmF0dGFjaChldmVudCwgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvZmYoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s/OiBhbnkpOiBJZlZpc2libGUge1xuICAgICAgICBFdmVudHMucmVtb3ZlKGV2ZW50LCBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNldElkbGVEdXJhdGlvbihzZWNvbmRzOiBudW1iZXIpOiBJZlZpc2libGUge1xuICAgICAgICB0aGlzLmlkbGVUaW1lID0gc2Vjb25kcyAqIDEwMDA7XG4gICAgICAgIHRoaXMuc3RhcnRJZGxlVGltZXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0SWRsZUR1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkbGVUaW1lO1xuICAgIH1cblxuICAgIGdldElkbGVJbmZvKCk6IElkbGVJbmZvIHtcbiAgICAgICAgbGV0IG5vdyA9ICsobmV3IERhdGUoKSk7XG4gICAgICAgIGxldCByZXM6IElkbGVJbmZvO1xuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IFNUQVRVU19JRExFKSB7XG4gICAgICAgICAgICByZXMgPSB7XG4gICAgICAgICAgICAgICAgaXNJZGxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGlkbGVGb3I6IG5vdyAtIHRoaXMuaWRsZVN0YXJ0ZWRUaW1lLFxuICAgICAgICAgICAgICAgIHRpbWVMZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRpbWVMZWZ0UGVyOiAxMDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgdGltZUxlZnQgPSAodGhpcy5pZGxlU3RhcnRlZFRpbWUgKyB0aGlzLmlkbGVUaW1lKSAtIG5vdztcbiAgICAgICAgICAgIHJlcyA9IHtcbiAgICAgICAgICAgICAgICBpc0lkbGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlkbGVGb3I6IG5vdyAtIHRoaXMuaWRsZVN0YXJ0ZWRUaW1lLFxuICAgICAgICAgICAgICAgIHRpbWVMZWZ0LFxuICAgICAgICAgICAgICAgIHRpbWVMZWZ0UGVyOiBwYXJzZUZsb2F0KCgxMDAgLSAodGltZUxlZnQgKiAxMDAgLyB0aGlzLmlkbGVUaW1lKSkudG9GaXhlZCgyKSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZGxlKGNhbGxiYWNrPzogKGRhdGE6IGFueSkgPT4gYW55KTogSWZWaXNpYmxlIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLm9uKFwiaWRsZVwiLCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IFNUQVRVU19JRExFO1xuICAgICAgICAgICAgRXZlbnRzLmZpcmUoXCJpZGxlXCIpO1xuICAgICAgICAgICAgRXZlbnRzLmZpcmUoXCJzdGF0dXNDaGFuZ2VkXCIsIFt7IHN0YXR1czogdGhpcy5zdGF0dXMgfV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGJsdXIoY2FsbGJhY2s/OiAoZGF0YTogYW55KSA9PiBhbnkpOiBJZlZpc2libGUge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMub24oXCJibHVyXCIsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gU1RBVFVTX0hJRERFTjtcbiAgICAgICAgICAgIEV2ZW50cy5maXJlKFwiYmx1clwiKTtcbiAgICAgICAgICAgIEV2ZW50cy5maXJlKFwic3RhdHVzQ2hhbmdlZFwiLCBbeyBzdGF0dXM6IHRoaXMuc3RhdHVzIH1dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmb2N1cyhjYWxsYmFjaz86IChkYXRhOiBhbnkpID0+IGFueSk6IElmVmlzaWJsZSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5vbihcImZvY3VzXCIsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXR1cyAhPT0gU1RBVFVTX0FDVElWRSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBTVEFUVVNfQUNUSVZFO1xuICAgICAgICAgICAgRXZlbnRzLmZpcmUoXCJmb2N1c1wiKTtcbiAgICAgICAgICAgIEV2ZW50cy5maXJlKFwid2FrZXVwXCIpO1xuICAgICAgICAgICAgRXZlbnRzLmZpcmUoXCJzdGF0dXNDaGFuZ2VkXCIsIFt7IHN0YXR1czogdGhpcy5zdGF0dXMgfV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHdha2V1cChjYWxsYmFjaz86IChkYXRhOiBhbnkpID0+IGFueSk6IElmVmlzaWJsZSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5vbihcIndha2V1cFwiLCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0dXMgIT09IFNUQVRVU19BQ1RJVkUpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gU1RBVFVTX0FDVElWRTtcbiAgICAgICAgICAgIEV2ZW50cy5maXJlKFwid2FrZXVwXCIpO1xuICAgICAgICAgICAgRXZlbnRzLmZpcmUoXCJzdGF0dXNDaGFuZ2VkXCIsIFt7IHN0YXR1czogdGhpcy5zdGF0dXMgfV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9uRXZlcnkoc2Vjb25kczogbnVtYmVyLCBjYWxsYmFjazogRnVuY3Rpb24pOiBUaW1lciB7XG4gICAgICAgIHJldHVybiBuZXcgVGltZXIodGhpcywgc2Vjb25kcywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIG5vdyhjaGVjaz86IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoY2hlY2sgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzID09PSBjaGVjaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXR1cyA9PT0gU1RBVFVTX0FDVElWRTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pZnZpc2libGUudHMiXSwic291cmNlUm9vdCI6IiJ9